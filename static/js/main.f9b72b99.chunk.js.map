{"version":3,"sources":["Components/functions/index.js","Components/Input/index.js","Components/Menu/index.js","App.js","reportWebVitals.js","index.js"],"names":["testPicker","homa","inputs","document","getElementsByClassName","value","toFixed","caCor","leftInput","rightInput","caCr","Math","floor","prl","round","setPlaceholder","test","counter","condition","Input","props","state","handleKeyPress","bind","e","target","toString","index","indexOf","key","toLowerCase","preventDefault","slice","length","this","enter","keyCounter","inputsNum","push","Fragment","style","width","type","className","menuTest","onKeyPress","disabled","activeTest","display","createInputs","Component","Menu","result","unit","handleTestClick","handleButtonClick","reset","isClicked","list","querySelectorAll","forEach","li","classList","add","renderClickedItem","innerText","restartResultAnimation","activeItem","inputValues","Array","from","map","input","isNaN","remove","some","isFinite","setState","querySelector","offsetWidth","prevProps","shorthand","resetState","buttonClass","menuItems","item","onClick","name","App","renderMenuItem","passShorthand","tests","filter","el","testName","defaultProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f9b72b99.chunk.js","sourcesContent":["export const homa = () => {\r\n  const inputs = document.getElementsByClassName('homa');\r\n  return ((inputs[0].value * inputs[1].value) / 405).toFixed(1);\r\n};\r\n\r\nexport const caCor = () => {\r\n  const inputs = document.getElementsByClassName('caCor');\r\n  const leftInput = inputs[0].value;\r\n  const rightInput = inputs[1].value;\r\n\r\n  if (leftInput > 0 && rightInput > 0)\r\n    return (0.08 * (40 - rightInput) + +leftInput).toFixed(2);\r\n};\r\n\r\nexport const caCr = () => {\r\n  const inputs = document.getElementsByClassName('caCr');\r\n  return Math.floor((inputs[0].value * 1000) / inputs[1].value);\r\n};\r\n\r\nexport const prl = () => {\r\n  const inputs = document.getElementsByClassName('prl');\r\n  return Math.round((100 * (inputs[1].value * 2)) / inputs[0].value);\r\n};\r\n\r\nexport const testPicker = {\r\n  homa: homa,\r\n  caCor: caCor,\r\n  caCr: caCr,\r\n  prl: prl,\r\n};\r\n\r\nexport const setPlaceholder = (test, counter) => {\r\n  //left or right input?\r\n  const condition = counter === 0;\r\n  const placeholders = {\r\n    homa: condition ? 'Glukoza mg/dl' : 'Insulina uIU/ml',\r\n    caCor: condition ? 'Wapń mg/dl' : 'Albumina g/l',\r\n    caCr: condition ? 'Wapń w moczu mg/dl' : 'Kreat. w moczu mg/dl',\r\n    prl: condition ? 'Prolaktyna' : 'Prolaktyna po precypitacji',\r\n  };\r\n  return placeholders[test];\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nimport { setPlaceholder } from '../functions/index';\r\nimport './style.css';\r\n\r\nclass Input extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n  }\r\n\r\n  handleKeyPress(e) {\r\n    const value = e.target.value.toString();\r\n    const index = value.indexOf('.');\r\n\r\n    if (e.key.toLowerCase() === 'e') e.preventDefault();\r\n    if (value.slice(index).length > 2) e.preventDefault();\r\n\r\n    return e.key === 'Enter' ? this.props.enter() : '';\r\n  }\r\n\r\n  createInputs() {\r\n    const inputs = [];\r\n    let keyCounter = 0;\r\n\r\n    while (inputs.length < this.props.inputsNum) {\r\n      inputs.push(\r\n        <React.Fragment key={`${this.props.menuTest}${keyCounter}`}>\r\n          <div style={{ width: '100%' }}>\r\n            <input\r\n              type=\"number\"\r\n              className={this.props.menuTest}\r\n              onKeyPress={this.handleKeyPress}\r\n              disabled={\r\n                this.props.menuTest === this.props.activeTest ? false : true\r\n              }\r\n            />\r\n            <span>{setPlaceholder(this.props.menuTest, keyCounter)}</span>{' '}\r\n          </div>\r\n        </React.Fragment>\r\n      );\r\n      keyCounter = keyCounter + 1;\r\n    }\r\n\r\n    return inputs;\r\n  }\r\n\r\n  render() {\r\n    return <div style={{ display: 'flex' }}>{this.createInputs()}</div>;\r\n  }\r\n}\r\n\r\nexport default Input;\r\n","import React, { Component } from 'react';\r\n\r\nimport './style.css';\r\nimport Input from '../Input/index';\r\nimport { testPicker } from '../functions/index';\r\n\r\nclass Menu extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { activeTest: '', result: '', unit: '' };\r\n\r\n    this.handleTestClick = this.handleTestClick.bind(this);\r\n    this.handleButtonClick = this.handleButtonClick.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n  }\r\n\r\n  handleTestClick(e) {\r\n    if (!this.props.isClicked) {\r\n      const list = document.querySelectorAll('li');\r\n      const addHidingClasses = element => {\r\n        element.classList.add('goodbye');\r\n      };\r\n\r\n      list.forEach(li =>\r\n        li !== e.target ? addHidingClasses(li) : li.classList.add('hello')\r\n      );\r\n      //renderMenuItem func from App\r\n      this.props.renderClickedItem(e.target.innerText);\r\n    }\r\n    return;\r\n  }\r\n\r\n  handleButtonClick() {\r\n    this.restartResultAnimation();\r\n\r\n    //select active inputs\r\n    const unit = this.props.activeItem();\r\n    const inputValues = Array.from(\r\n      document.getElementsByClassName(this.state.activeTest)\r\n    );\r\n    //imported func\r\n    let result = testPicker[this.state.activeTest]();\r\n\r\n    //check for errors\r\n    inputValues.map(input => {\r\n      return input.value <= 0 || !input.value || isNaN(input.value)\r\n        ? input.classList.add('error')\r\n        : input.classList.remove('error');\r\n    });\r\n\r\n    if (inputValues.some(input => input.value <= 0)) {\r\n      result = 'błędne dane';\r\n    } else if (isNaN(result) || !isFinite(result)) result = 'błędne dane';\r\n\r\n    this.setState({\r\n      result: result,\r\n      unit: result && !isNaN(result) ? unit[0].unit : '',\r\n    });\r\n  }\r\n\r\n  restartResultAnimation() {\r\n    const result = document.querySelector('h1');\r\n    result.classList.remove('clicked');\r\n    void result.offsetWidth;\r\n    result.classList.add('clicked');\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const activeTest = this.props.activeItem();\r\n\r\n    return prevProps.isClicked !== this.props.isClicked\r\n      ? this.setState({\r\n          activeTest: activeTest ? activeTest[0].shorthand : '', //activeTest enables input\r\n          result: '',\r\n          unit: '',\r\n        })\r\n      : '';\r\n  }\r\n\r\n  //reset button\r\n  reset() {\r\n    const list = document.querySelectorAll('li');\r\n\r\n    list.forEach(li => {\r\n      li.classList.remove('goodbye', 'hello');\r\n    });\r\n\r\n    document.querySelectorAll('input').forEach(input => {\r\n      input.value = '';\r\n      input.classList.remove('error');\r\n    });\r\n    this.props.resetState();\r\n  }\r\n\r\n  render() {\r\n    const buttonClass = `count ${this.props.isClicked ? 'clicked' : ''}`;\r\n\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <ul className=\"menu\">\r\n          {this.props.menuItems.map(item => {\r\n            return (\r\n              <React.Fragment key={item.name}>\r\n                <li onClick={this.handleTestClick}>{item.name}</li>\r\n                <Input\r\n                  enter={this.handleButtonClick}\r\n                  menuTest={item.shorthand}\r\n                  inputsNum={item.inputsNum}\r\n                  activeTest={this.state.activeTest}\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n\r\n          <section className=\"buttonContainer\">\r\n            <button className={buttonClass} onClick={this.reset}>\r\n              Wróć\r\n            </button>\r\n            <button className={buttonClass} onClick={this.handleButtonClick}>\r\n              Oblicz\r\n            </button>\r\n          </section>\r\n          <h1 className={this.props.isClicked ? 'clicked' : ''}>\r\n            {`Wynik: ${this.state.result} ${this.state.unit}`}\r\n          </h1>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Menu;\r\n","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\nimport Menu from './Components/Menu/index';\r\n\r\nclass App extends Component {\r\n  static defaultProps = {\r\n    tests: [\r\n      { testName: 'HOMA IR', shorthand: 'homa', inputs: 2, unit: '' },\r\n      {\r\n        testName: 'Wapń Skorygowany',\r\n        shorthand: 'caCor',\r\n        inputs: 2,\r\n        unit: 'mg/dl',\r\n      },\r\n      {\r\n        testName: 'Wapń / g Kreatyniny',\r\n        shorthand: 'caCr',\r\n        inputs: 2,\r\n        unit: 'mg/g',\r\n      },\r\n      {\r\n        testName: 'Odzysk Prolaktyny',\r\n        shorthand: 'prl',\r\n        inputs: 2,\r\n        unit: '%',\r\n      },\r\n    ],\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      item: '',\r\n      isClicked: false,\r\n    };\r\n\r\n    this.renderMenuItem = this.renderMenuItem.bind(this);\r\n    this.passShorthand = this.passShorthand.bind(this);\r\n    this.resetState = this.resetState.bind(this);\r\n  }\r\n\r\n  //checks which el was clicked and pass it in props to Menu\r\n  renderMenuItem(item) {\r\n    this.setState({ item: [item], isClicked: true });\r\n  }\r\n\r\n  //pass shorthand and unit to Menu\r\n  passShorthand() {\r\n    const activeTest = this.props.tests.filter(el =>\r\n      el.testName === this.state.item[0]\r\n        ? { shorthand: el.shorthand, unit: el.unit }\r\n        : ''\r\n    );\r\n\r\n    return this.state.isClicked ? activeTest : '';\r\n  }\r\n\r\n  //reset button\r\n  resetState() {\r\n    this.setState({ isClicked: false, item: '' });\r\n  }\r\n\r\n  render() {\r\n    const isClicked = this.state.isClicked;\r\n    return (\r\n      <div>\r\n        <Menu\r\n          //show list of items\r\n          menuItems={this.props.tests.map(test => {\r\n            return {\r\n              name: test.testName,\r\n              shorthand: test.shorthand,\r\n              inputsNum: test.inputs,\r\n            };\r\n          })}\r\n          renderClickedItem={this.renderMenuItem}\r\n          activeItem={this.passShorthand}\r\n          isClicked={isClicked}\r\n          resetState={this.resetState}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}